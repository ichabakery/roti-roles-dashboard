import { supabase } from '@/integrations/supabase/client';

export interface OrderItem {
  productId: string;
  productName: string;
  quantity: number;
  unitPrice: number;
}

export interface OrderFormData {
  customer_name: string;
  customer_phone: string;
  order_date: string;
  delivery_date: string;
  notes?: string;
  items: OrderItem[];
}

export interface Order {
  id?: string;
  order_number: string;
  branch_id: string;
  branch_name?: string;
  customer_name: string;
  customer_phone?: string;
  order_date: string;
  delivery_date: string;
  status: 'pending' | 'confirmed' | 'in_production' | 'ready' | 'completed' | 'cancelled';
  total_amount: number;
  payment_type?: 'cash_on_delivery' | 'dp' | 'full_payment';
  payment_status?: 'pending' | 'partial' | 'paid' | 'full_payment';
  dp_amount?: number;
  remaining_amount?: number;
  delivery_address?: string;
  linked_transaction_id?: string;
  notes?: string;
  items?: any;
  created_at?: string;
  created_by: string;
}

export const orderService = {
  async createOrder(orderData: OrderFormData & { 
    branch_id: string, 
    created_by: string, 
    allowZeroStock?: boolean,
    payment_type?: string,
    dp_amount?: number,
    delivery_address?: string,
    pickup_branch_id?: string
  }) {
    try {
      // Validate items
      if (!orderData.items || orderData.items.length === 0) {
        throw new Error('Pesanan harus memiliki minimal 1 item');
      }

      // Calculate total
      const total_amount = orderData.items.reduce((total, item) => 
        total + (item.quantity * item.unitPrice), 0);

      // Calculate payment details
      const payment_status = orderData.payment_type === 'full_payment' ? 'paid' : 'pending';
      const remaining_amount = orderData.payment_type === 'dp' ? 
        total_amount - (orderData.dp_amount || 0) : 
        orderData.payment_type === 'full_payment' ? 0 : total_amount;

      // Determine initial status based on stock needs (allow zero stock orders)
      const hasProductionNeed = Array.isArray(orderData.items)
        ? orderData.items.some((it: any) =>
            typeof it?.availableStock === 'number' && it.quantity > it.availableStock
          )
        : false;
      const initial_status: Order['status'] = hasProductionNeed ? 'in_production' : 'pending';

      // Note: order_number will be auto-generated by database trigger
      const newOrder = {
        order_number: `ORD-${Date.now()}`, // Temporary, will be overridden by trigger
        branch_id: orderData.branch_id,
        pickup_branch_id: orderData.pickup_branch_id || orderData.branch_id,
        customer_name: orderData.customer_name,
        customer_phone: orderData.customer_phone,
        order_date: orderData.order_date,
        delivery_date: orderData.delivery_date,
        total_amount,
        payment_type: orderData.payment_type || 'cash_on_delivery',
        payment_status,
        dp_amount: orderData.dp_amount || 0,
        remaining_amount,
        delivery_address: orderData.delivery_address,
        items: orderData.items,
        notes: orderData.notes,
        status: initial_status,
        created_by: orderData.created_by
      };

      // Create the order first
      const { data: orderResult, error: orderError } = await supabase
        .from('orders')
        .insert({
          ...newOrder,
          items: JSON.stringify(newOrder.items)
        })
        .select()
        .single();

      if (orderError) {
        console.error('Error creating order:', orderError);
        throw new Error(`Gagal membuat pesanan: ${orderError.message}`);
      }

      // Create order items in normalized table for better data management
      if (Array.isArray(orderData.items) && orderData.items.length > 0) {
        const orderItems = orderData.items.map((item: any) => {
          const availableStock = typeof item.availableStock === 'number' ? item.availableStock : 0;
          const needsProduction = item.quantity > availableStock;
          
          let stockStatus = 'available';
          if (availableStock === 0) {
            stockStatus = 'out_of_stock';
          } else if (item.quantity > availableStock) {
            stockStatus = 'low_stock';
          }

          return {
            order_id: orderResult.id,
            product_id: item.productId,
            quantity: item.quantity,
            unit_price: item.unitPrice,
            subtotal: item.quantity * item.unitPrice,
            production_needed: needsProduction,
            stock_status: stockStatus,
            notes: needsProduction ? `Perlu produksi: ${item.quantity - availableStock} unit` : null
          };
        });

        const { error: itemsError } = await supabase
          .from('order_items')
          .insert(orderItems);

        if (itemsError) {
          console.error('Error creating order items:', itemsError);
          // Don't fail the entire order if order items fail, but log the error
          console.warn('Order created but order items failed to create:', itemsError.message);
        }
      }

      return orderResult;
    } catch (error: any) {
      console.error('Error creating order:', error);
      throw new Error(error.message || 'Gagal membuat pesanan. Silakan coba lagi.');
    }
  },

  async getOrders(branch_id?: string) {
    try {
      // Use the enhanced function for better owner access
      const { data, error } = await supabase
        .rpc('get_orders_for_user', { p_branch_id: branch_id || null });

      if (error) throw error;
      
      // Parse items back to array if they're stringified
      const parsedData = data.map((order: any) => ({
        ...order,
        items: typeof order.items === 'string' ? JSON.parse(order.items) : order.items
      }));
      
      return parsedData as Order[];
    } catch (error) {
      console.error('Error fetching orders:', error);
      throw error;
    }
  },

  async getOrderById(orderId: string) {
    const { data, error } = await supabase
      .from('orders')
      .select('*')
      .eq('id', orderId)
      .single();

    if (error) throw error;
    
    // Get branch name separately
    const { data: branchData } = await supabase
      .from('branches')
      .select('name')
      .eq('id', data.branch_id)
      .single();
    
    // Parse items back to array if they're stringified
    const parsedItems = typeof data.items === 'string' ? JSON.parse(data.items) : data.items;
    
    return {
      ...data,
      items: parsedItems,
      branch_name: branchData?.name
    } as Order;
  },

  async getOrderStatusHistory(orderId: string) {
    const { data, error } = await supabase
      .from('order_status_history')
      .select('*')
      .eq('order_id', orderId)
      .order('changed_at', { ascending: false });

    if (error) throw error;
    return data;
  },

  async updateOrderStatus(orderId: string, status: Order['status'], notes?: string) {
    const { data, error } = await supabase
      .from('orders')
      .update({ 
        status,
        updated_at: new Date().toISOString()
      })
      .eq('id', orderId)
      .select('*')
      .single();

    if (error) throw error;
    
    // Get branch name separately  
    const { data: branchData } = await supabase
      .from('branches')
      .select('name')
      .eq('id', data.branch_id)
      .single();
    
    return {
      ...data,
      branch_name: branchData?.name
    } as Order;
  },

  async createProductionRequest(orderId: string, productId: string, quantity: number, branchId: string) {
    try {
      const { data: user } = await supabase.auth.getUser();
      if (!user.user) throw new Error('User not authenticated');

      const { data, error } = await supabase
        .from('production_requests')
        .insert({
          product_id: productId,
          branch_id: branchId,
          quantity_requested: quantity,
          production_date: new Date().toISOString().split('T')[0],
          notes: `Permintaan produksi dari pesanan ${orderId}`,
          requested_by: user.user.id
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error creating production request:', error);
      throw error;
    }
  }
};
