import { supabase } from '@/integrations/supabase/client';

export interface OrderItem {
  productId: string;
  productName: string;
  quantity: number;
  unitPrice: number;
}

export interface OrderFormData {
  customer_name: string;
  customer_phone: string;
  order_date: string;
  delivery_date: string;
  notes?: string;
  items: OrderItem[];
}

export interface Order {
  id?: string;
  order_number: string;
  branch_id: string;
  branch_name?: string;
  customer_name: string;
  customer_phone?: string;
  order_date: string;
  delivery_date: string;
  status: 'pending' | 'confirmed' | 'in_production' | 'ready' | 'completed' | 'cancelled';
  total_amount: number;
  notes?: string;
  items?: any;
  created_at?: string;
  created_by: string;
}

export const orderService = {
  async createOrder(orderData: OrderFormData & { branch_id: string, created_by: string, allowZeroStock?: boolean }) {
    try {
      // Validate items
      if (!orderData.items || orderData.items.length === 0) {
        throw new Error('Pesanan harus memiliki minimal 1 item');
      }

      // Calculate total
      const total_amount = orderData.items.reduce((total, item) => 
        total + (item.quantity * item.unitPrice), 0);

      // Note: order_number will be auto-generated by database trigger
      const newOrder = {
        order_number: `ORD-${Date.now()}`, // Temporary, will be overridden by trigger
        branch_id: orderData.branch_id,
        customer_name: orderData.customer_name,
        customer_phone: orderData.customer_phone,
        order_date: orderData.order_date,
        delivery_date: orderData.delivery_date,
        total_amount,
        items: orderData.items,
        notes: orderData.notes,
        status: 'pending' as const,
        created_by: orderData.created_by
      };

      const { data, error } = await supabase
        .from('orders')
        .insert({
          ...newOrder,
          items: JSON.stringify(newOrder.items)
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error creating order:', error);
      throw error;
    }
  },

  async getOrders(branch_id?: string) {
    try {
      // Use the enhanced function for better owner access
      const { data, error } = await supabase
        .rpc('get_orders_for_user', { p_branch_id: branch_id || null });

      if (error) throw error;
      return data as Order[];
    } catch (error) {
      console.error('Error fetching orders:', error);
      throw error;
    }
  },

  async getOrderById(orderId: string) {
    const { data, error } = await supabase
      .from('orders')
      .select('*')
      .eq('id', orderId)
      .single();

    if (error) throw error;
    
    // Get branch name separately
    const { data: branchData } = await supabase
      .from('branches')
      .select('name')
      .eq('id', data.branch_id)
      .single();
    
    return {
      ...data,
      branch_name: branchData?.name
    } as Order;
  },

  async getOrderStatusHistory(orderId: string) {
    const { data, error } = await supabase
      .from('order_status_history')
      .select('*')
      .eq('order_id', orderId)
      .order('changed_at', { ascending: false });

    if (error) throw error;
    return data;
  },

  async updateOrderStatus(orderId: string, status: Order['status'], notes?: string) {
    const { data, error } = await supabase
      .from('orders')
      .update({ 
        status,
        updated_at: new Date().toISOString()
      })
      .eq('id', orderId)
      .select('*')
      .single();

    if (error) throw error;
    
    // Get branch name separately  
    const { data: branchData } = await supabase
      .from('branches')
      .select('name')
      .eq('id', data.branch_id)
      .single();
    
    return {
      ...data,
      branch_name: branchData?.name
    } as Order;
  },

  async createProductionRequest(orderId: string, productId: string, quantity: number, branchId: string) {
    try {
      const { data: user } = await supabase.auth.getUser();
      if (!user.user) throw new Error('User not authenticated');

      const { data, error } = await supabase
        .from('production_requests')
        .insert({
          product_id: productId,
          branch_id: branchId,
          quantity_requested: quantity,
          production_date: new Date().toISOString().split('T')[0],
          notes: `Permintaan produksi dari pesanan ${orderId}`,
          requested_by: user.user.id
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error creating production request:', error);
      throw error;
    }
  }
};
